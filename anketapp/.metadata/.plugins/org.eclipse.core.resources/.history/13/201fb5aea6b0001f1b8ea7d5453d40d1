package com.example.anketv2.business.concretes;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.anketv2.business.abstracts.AnketService;
import com.example.anketv2.business.request.saveAnketRequest;
import com.example.anketv2.entities.abstracts.Soru;
import com.example.anketv2.entities.concretes.Anket;
import com.example.anketv2.repository.AnketRepository;
import com.example.anketv2.repository.SoruRepository;

import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

@Service
public class AnketManager implements AnketService {
	@Autowired
    private  AnketRepository anketRepository;
	@Autowired
    private SoruRepository soruRepository;

    @Autowired
    public AnketManager(AnketRepository anketRepository, SoruRepository soruRepository) {
        this.anketRepository = anketRepository;
        this.soruRepository = soruRepository;
    }

    

    @Override
    public List<Anket> getAnketById(Integer anketId) {
        // Eğer ID'ye göre sorgulama yapmak istiyorsanız:
        return anketRepository.findAll().stream()
                               .filter(anket -> anket.getId().equals(anketId))
                               .collect(Collectors.toList());
    }
    
    public List<Soru> getSorularByIds(List<Integer> soruIds) {
        return soruRepository.findAllById(soruIds);
    }


    @Override
    public List<Soru> tumSorulariListele() {
        return soruRepository.findAll();
    }
    
    @Override
    public List<String> getAllAnketNames() {
        return anketRepository.findAll().stream()
                              .map(Anket::getAnketAdi)  // Anket adlarını alıyoruz
                              .collect(Collectors.toList());
    }
    @Override
    public Anket getAnketByName(String anketAdi) {
        return anketRepository.findAll().stream()
                              .filter(anket -> anket.getAnketAdi() != null && anket.getAnketAdi().equalsIgnoreCase(anketAdi))
                              .findFirst()
                              .orElse(null);
    }
    public Anket saveAnket(saveAnketRequest request) {
        // Yeni bir anket oluştur
        Anket anket = new Anket();
        anket.setAnketAdi(request.getAnketAdi());

        // Soru ID'lerini al ve veritabanından ilgili soruları çek
        Set<Long> soruIds = request.getSoruIds(); // Soru ID'lerini alıyoruz

        // Long ID'lerini Integer'a dönüştür
        Set<Integer> soruIdsInteger = soruIds.stream()
                                              .map(Long::intValue)
                                              .collect(Collectors.toSet());

        // Integer ID'leri ile soruları alıyoruz
        Set<Soru> sorular = new HashSet<>(soruRepository.findAllById(soruIdsInteger)); 

        // Soruları ankete ekle, burada sadece soruların ID'leri ilişkilendirilecek
        anket.setSorular(sorular);

        // Anketi veritabanına kaydet
        return anketRepository.save(anket);
    }



}
